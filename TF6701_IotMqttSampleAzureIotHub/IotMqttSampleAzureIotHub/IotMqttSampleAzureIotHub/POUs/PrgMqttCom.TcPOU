<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="PrgMqttCom" Id="{c70f107a-6ca5-4bfb-b775-e2929cbf9dae}" SpecialFunc="None">
    <Declaration><![CDATA[(* This sample demonstrates how to connect to Microsoft Azure IoT Hub using MQTT. Please make sure to use the right Root CA certificate, Microsoft has
migrated to a new certificate authority. We recommend the following Microsoft documentation articles that explain how the CA certificate can be retrieved: 
https://learn.microsoft.com/en-us/azure/iot/iot-mqtt-connect-to-iot-hub 
https://techcommunity.microsoft.com/t5/internet-of-things-blog/azure-iot-tls-critical-changes-are-almost-here-and-why-you/ba-p/2393169
*)
PROGRAM PrgMqttCom
VAR
	fbMqttClient : FB_IotMqttClient;
	bSetParameter : BOOL := TRUE;
	bConnect : BOOL := TRUE;
	
	(* publish message *)
	sTopicPub : STRING(255) := 'devices/PlaceYourDeviceIdHere/messages/events/readpipe/'; // Insert DeviceId
	sPayloadPub : STRING(255);
	i: UDINT;
	fbTimer : TON := (PT:=T#1S);
	
	(* subscription *)
	bSubscribed : BOOL;
	sTopicSub : STRING(255) := 'devices/PlaceYourDeviceIdHere/messages/devicebound/#'; // Insert DeviceId
	(* received message *)
	{attribute 'TcEncoding':='UTF-8'}
	sTopicRcv : STRING(255);
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadRcv : STRING(255);
	fbMessageQueue : FB_IotMqttMessageQueue;
	fbMessage : FB_IotMqttMessage;	
	
	hrErrorOccurred : HRESULT; // contains the latest occurred error
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bSetParameter THEN
	bSetParameter := FALSE;
	
	(* Option 1: authentication via Device SAS Token *)
	(* Please consult Microsoft Azure IoT Hub documentation for more information *)
	fbMqttClient.stTLS.sCA := 'c:\TwinCAT\3.1\Config\Certificates\DigiCertGlobalRootG2.cer'; // CA certificate 
	fbMqttClient.stTLS.sAzureSas := 'PlaceDeviceSasTokenHere'; // Device SAS Token
	
	(* Option 2: authentication via X509 certificate *)
	(* Please consult Microsoft Azure IoT Hub documentation for more information *)
	//fbMqttClient.stTLS.sCA := 'c:\TwinCAT\3.1\Config\Certificates\DigiCertGlobalRootG2.cer'; // CA certificate
	//fbMqttClient.stTLS.sCert := 'c:\TwinCAT\3.1\Config\Certificates\MyDeviceCert.pem';
	//fbMqttClient.stTLS.sKeyFile := 'c:\TwinCAT\3.1\Config\Certificates\MyDeviceCert.key';
	//fbMqttClient.sHostName := myIotHub.azure-devices.net';
	//fbMqttClient.nHostPort := 8883;
	//fbMqttClient.sClientId := 'MyDevice';
	//fbMqttClient.sUserName := 'myIotHub.azure-devices.net/MyDevice/?api-version=2021-04-12';
	
	(* Option 3: authentication via Device SAS Token splitted *)
	//fbMqttClient.stTLS.sCA := 'c:\TwinCAT\3.1\Config\Certificates\DigiCertGlobalRootG2.cer'; // CA certificate
	//fbMqttClient.sHostName := myIotHub.azure-devices.net';
	//fbMqttClient.nHostPort := 8883;
	//fbMqttClient.stTLS.sVersion := 'tlsv1.2';
	//fbMqttClient.sClientId := 'MyDevice';
	//fbMqttClient.sUserName := 'myIotHub.azure-devices.net/MyDevice/?api-version=2021-04-12';
	//fbMqttClient.sUserPassword := 'SharedAccessSignature sr=myIotHub.azure-devices.net%2Fdevices%2FMyDevice&sig=SAStokenhere&se=17495938573';
	
	fbMqttClient.ipMessageQueue := fbMessageQueue;
END_IF

fbMqttClient.Execute(bConnect);
IF fbMqttClient.bError THEN
	// add your error logging here
	hrErrorOccurred := fbMqttClient.hrErrorCode;
END_IF

IF fbMessageQueue.nQueuedMessages > 0 THEN
	IF fbMessageQueue.Dequeue(fbMessage:=fbMessage) THEN
		fbMessage.GetTopic(pTopic:=ADR(sTopicRcv), nTopicSize:=SIZEOF(sTopicRcv) );
		fbMessage.GetPayload(pPayload:=ADR(sPayloadRcv), nPayloadSize:=SIZEOF(sPayloadRcv), bSetNullTermination:=TRUE);
	END_IF
END_IF

IF fbMqttClient.bConnected THEN
	IF NOT bSubscribed THEN
		bSubscribed := fbMqttClient.Subscribe(sTopic:=sTopicSub, eQoS:=TcIotMqttQos.AtLeastOnceDelivery);
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF	

	fbTimer(IN:=TRUE);
	IF fbTimer.Q THEN // publish new payload every second
		fbTimer(IN:=FALSE);
		i := i + 1;
		sPayloadPub := CONCAT('MyMessage', TO_STRING(i));
		fbMqttClient.Publish(	sTopic:= sTopicPub, 
								pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), 
								eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= FALSE, bQueue:= FALSE );
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>