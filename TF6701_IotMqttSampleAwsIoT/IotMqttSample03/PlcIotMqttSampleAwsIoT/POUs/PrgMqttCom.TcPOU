<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PrgMqttCom" Id="{c70f107a-6ca5-4bfb-b775-e2929cbf9dae}" SpecialFunc="None">
    <Declaration><![CDATA[(* This sample demonstrates how to connect to AWS IoT Core using MQTT. Please make sure to use the correct Amazon Root CA certificate. 
You can either use self-signed certificates that have been created on the AWS IoT Core management console, or bring your own certificates by registering
your certificate authority at the AWS IoT Core service. Please consult the AWS documentation for more information.
In both cases you need to reference the Amazon Root CA certificate in the stTLS.sCA variable. The variables stTLS.sCert and stTLS.sKeyFile 
contain the file path either to the self-signed client certificate (and private key) or CA-signed certificate (and private key). *)
PROGRAM PrgMqttCom
VAR
	fbMqttClient : FB_IotMqttClient;
	bSetParameter : BOOL := TRUE;
	bConnect : BOOL := TRUE;
	
	(* published message *)
	sTopicPub : STRING(255) := 'things/CX-12345';
	sPayloadPub : STRING(255);
	i: UDINT;
	fbTimer : TON := (PT:=T#1S);
	
	(* topic subscribtion *)
	bSubscribed : BOOL;
	sTopicSub : STRING(255) := 'things/CX-12345';

	(* received message *)	
	{attribute 'TcEncoding':='UTF-8'}
	sTopicRcv : STRING(255);
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadRcv : STRING(255);
	
	fbMessageQueue : FB_IotMqttMessageQueue;
	fbMessage : FB_IotMqttMessage;
	
	hrErrorOccurred : HRESULT; // contains the latest occurred error
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bSetParameter THEN
	bSetParameter := FALSE;
	
	(* TLS settings for AWS IoT connection *)
	fbMqttClient.stTLS.sCA := 'c:\TwinCAT\3.1\Config\Certificates\AmazonRootCA1.pem'; // Amazon Root CA
    fbMqttClient.stTLS.sCert := 'c:\TwinCAT\3.1\Config\Certificates\7613eee18a-certificate.pem.crt'; // Either self-signed or CA-signed
    fbMqttClient.stTLS.sKeyFile := 'c:\TwinCAT\3.1\Config\Certificates\7613eee18a-private.pem.key'; // Private key
	
	(* Broker settings für AWS IoT *)
	fbMqttClient.sHostName:= 'a35rjvy201xp77.iot.eu-west-1.amazonaws.com';
	fbMqttClient.nHostPort:= 8883;
	fbMqttClient.sClientId:= 'CX-12345'; 
	
	fbMqttClient.ipMessageQueue := fbMessageQueue;
END_IF

fbMqttClient.Execute(bConnect);
IF fbMqttClient.bError THEN
	// add your error logging here
	hrErrorOccurred := fbMqttClient.hrErrorCode;
END_IF
IF fbMessageQueue.nQueuedMessages > 0 THEN
	IF fbMessageQueue.Dequeue(fbMessage:=fbMessage) THEN
		fbMessage.GetTopic(pTopic:=ADR(sTopicRcv), nTopicSize:=SIZEOF(sTopicRcv) );
		fbMessage.GetPayload(pPayload:=ADR(sPayloadRcv), nPayloadSize:=SIZEOF(sPayloadRcv), bSetNullTermination:=FALSE);
	END_IF
END_IF

IF fbMqttClient.bConnected THEN
	IF NOT bSubscribed THEN
		bSubscribed := fbMqttClient.Subscribe(sTopic:=sTopicSub, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
	fbTimer(IN:=TRUE);
	IF fbTimer.Q THEN // publish new payload every second
		fbTimer(IN:=FALSE);
		i := i + 1;
		sPayloadPub := CONCAT('MyMessage', TO_STRING(i));
		fbMqttClient.Publish(	sTopic:= sTopicPub, 
								pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), 
								eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= FALSE, bQueue:= FALSE );
		IF fbMqttClient.bError THEN
			// add your error logging here			
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
END_IF]]></ST>
    </Implementation>
    <LineIds Name="PrgMqttCom">
      <LineId Id="235" Count="2" />
      <LineId Id="302" Count="0" />
      <LineId Id="304" Count="1" />
      <LineId Id="303" Count="0" />
      <LineId Id="243" Count="4" />
      <LineId Id="249" Count="4" />
      <LineId Id="334" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="335" Count="1" />
      <LineId Id="254" Count="9" />
      <LineId Id="338" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="264" Count="8" />
      <LineId Id="341" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>